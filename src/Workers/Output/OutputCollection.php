<?php

/**
 * Contains the Evenflow\Workers\Output\OutputCollection class.
 *
 * @author     Brian Reich <breich@reich-consulting.net>
 * @copyright  Copyright (C) Reich Web Consulting
 * @license    MIT
 */

namespace Evenflow\Workers\Output;

use Evenflow\Workers\Output\BasicOutput;
use Evenflow\Workers\Output\ICollection;
use Evenflow\Workers\Input\IWorkloadInput;

/**
 * Encapsulates one or more IWorkloadOutputs generated by a grouped workflow.
 *
 * While most Workers execute sequentially, some Workers, such as the
 * SplitWorkflow, will split input collections into individual inputs, and run
 * then each through a different flow. An OutputCollection is used to collect
 * the outputs of the various workflows into a single Output object that can be
 * passed to the next Workflow step.
 *
 * @author     Brian Reich <breich@reich-consulting.net>
 * @copyright  Copyright (C) Reich Web Consulting
 * @license    MIT
 */
class OutputCollection extends BasicOutput implements ICollection, IWorkloadInput
{
    /**
     * Array of encapsulated IWorkloadOutputs.
     *
     * @var array
     */
    protected $outputs;

    /**
     * Creates a new OutputCollection.
     *
     * @param array           $outputs   The initial list of outputs.
     * @param bool|boolean    $success   The initial success flag.
     * @param string          $summary   The initial summary.
     * @param \Exception|null $exception The initial Exception.
     */
    public function __construct(
        array $outputs = [],
        bool $success = true,
        string $summary = '',
        ?\Exception $exception = null
    ) {
        parent::__construct($success, $summary, $exception);
        $this->setOutputs($outputs);
    }

    /**
     * Sets the list of Outputs encapsulated by the OutputCollection.
     *
     * An existing outputs will be removed and replaced with the specified list.
     *
     * @param array $outputs The list of IWorkloadOutputs to set.
     */
    public function setOutputs(array $outputs) : void
    {
        $this->outputs = [];
        $this->addOutputs($outputs);
    }

    /**
     * Adds all IWorkloadOutputs in the specified array.
     *
     * The outputs are added to the end of the existing Collection and do not
     * overwrite any existing outputs.
     *
     * @param array $outputs The array of IWorkloadOutputs to add.
     */
    public function addOutputs($outputs) : void
    {
        array_walk($outputs, array($this, 'addOutput'));
    }

    /**
     * Adds an individual IWorkloadOutput to the OutputCollection.
     *
     * @param IWorkloadOutput $output The output to add.
     */
    public function addOutput(IWorkloadOutput $output) : void
    {
        $this->outputs[] = $output;
    }

    /**
     * Returns an array of all IWorkloadOutputs in the collection.
     *
     * @return array Returns an array of all IWorkloadOutputs in the collection.
     */
    public function getOutputs() : array
    {
        return $this->outputs;
    }

    /**
     * Returns a count of all IWorkloadOutputs in the Collection.
     *
     * @return int Returns a count of all Outputs.
     */
    public function getOutputCount() : int
    {
        return count($this->outputs);
    }

    /**
     * Returns an array of individual IWorkloadOutputs in the collection.
     *
     * @return array Returns an array of IWorkloadOutputs.
     */
    public function split() : array
    {
        return $this->getOutputs();
    }

    public function getData()
    {
        return $this->getOutputs();
    }
}
